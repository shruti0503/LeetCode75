class Solution {
    //brute force app to the problem would we to check for every char in t if present return true.
    //o(n*n)
public:
// If you want to preserve the relative ordering of the characters in s while checking
//  if s is a subsequence of t, you can use two pointers to keep track of the positions of the characters in s and t.
//   The idea is to iterate through t and check if the current character in t matches the current character in s.
//    If there is a match, we move both pointers to the next characters in s and t.
//     If there is no match, we move only the pointer in t. 
//     If we reach the end of s, it means that s is a subsequence of t.

    bool isSubsequence(string s, string t) {
       int i = 0, j = 0;
    while (i < s.size() && j < t.size()) {
        if (s[i] == t[j]) {
            i++;
        }
        j++;
    }
    return i == s.size();
    }
};
