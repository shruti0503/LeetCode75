Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. If no such indices exists, return false.

 

Example 1:

Input: nums = [1,2,3,4,5]
Output: true
Explanation: Any triplet where i < j < k is valid.

//brute force
class Solution {
public:
//brute force
    bool increasingTriplet(vector<int>& nums) {
        int n = nums.size();
        
        for (int i = 0; i < n - 2; i++) {
            for (int j = i + 1; j < n - 1; j++) {
                for (int k = j + 1; k < n; k++) {
                    if (nums[i] < nums[j] && nums[j] < nums[k]) {
                        return true;
                    }
                }
            }
        }
        
        return false;
    }
};

//optimised
class Solution {
public:
    bool increasingTriplet(vector<int>& nums) {
        //first number 
        int one=INT_MAX;
        int second=INT_MAX;
        for(int i=0;i<nums.size();i++){
            if(nums[i]<one){
                //found a smaller number : one
                one=nums[i];
            }
            else if(nums[i]>one && nums[i]<second){
                second=nums[i];
            }
            else if(nums[i]>second){
                return true; //found third number
            }
            
        }
        return false;
    }
};
