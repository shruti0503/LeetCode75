//BRUTE FORCE
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

//  T implementation uses two vectors to store the values of the odd and even nodes, respectively. 
//  We then create a new linked list by iterating over these vectors and creating new nodes with the corresponding values.

// However, this implementation is not optimal, as it uses O(n) extra space to store the values of the nodes in the vectors, 
// and then uses O(n) time to create a new linked list. The optimal solution rearranges the nodes in place,
//  without requiring any extra space, and can be implemented in O(n) time complexity.
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if (!head || !head->next) {
            return head;
        }
        
        vector<int> odd_nodes;
        vector<int> even_nodes;
        ListNode* node = head;
        
        // Traverse the list and extract all nodes with odd and even indices
        int index = 1;
        while (node) {
            if (index % 2 == 1) {
                odd_nodes.push_back(node->val);
            } else {
                even_nodes.push_back(node->val);
            }
            node = node->next;
            index += 1;
        }
        
        // Create a new linked list by combining the odd and even nodes
        ListNode* new_head = new ListNode(odd_nodes[0]);
        ListNode* new_node = new_head;
        for (int i = 1; i < odd_nodes.size(); i++) {
            new_node->next = new ListNode(odd_nodes[i]);
            new_node = new_node->next;
        }
        for (int i = 0; i < even_nodes.size(); i++) {
            new_node->next = new ListNode(even_nodes[i]);
            new_node = new_node->next;
        }
        
        return new_head;
    }
};
//OPTIMAL
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        //very intuitive aaproach
        if(!head) return head;
        //initialise the head and even pointer
        ListNode* odd=head;
      
        ListNode* evenHead=head->next;
        ListNode* even=head->next;
        while(even!=NULL && even->next!=NULL){
            odd->next=odd->next->next;
            even->next=even->next->next;
            odd=odd->next;
            even=even->next;
        }
        odd->next=evenHead;
        return head;

    }
};
